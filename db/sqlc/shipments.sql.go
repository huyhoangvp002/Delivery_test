// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shipments.sql

package db

import (
	"context"
	"database/sql"
)

const checkShipmentCodeExists = `-- name: CheckShipmentCodeExists :one
SELECT EXISTS (
  SELECT 1 FROM shipments WHERE shipment_code = $1
)
`

func (q *Queries) CheckShipmentCodeExists(ctx context.Context, shipmentCode sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkShipmentCodeExists, shipmentCode)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createShipment = `-- name: CreateShipment :one
INSERT INTO shipments (client_id, from_address_id, to_address_id, shipper_id, shipment_code, fee, status)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, client_id, from_address_id, to_address_id, shipper_id, shipment_code, fee, status, created_at, updated_at
`

type CreateShipmentParams struct {
	ClientID      sql.NullInt64  `json:"client_id"`
	FromAddressID sql.NullInt64  `json:"from_address_id"`
	ToAddressID   sql.NullInt64  `json:"to_address_id"`
	ShipperID     sql.NullInt64  `json:"shipper_id"`
	ShipmentCode  sql.NullString `json:"shipment_code"`
	Fee           int32          `json:"fee"`
	Status        sql.NullString `json:"status"`
}

func (q *Queries) CreateShipment(ctx context.Context, arg CreateShipmentParams) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, createShipment,
		arg.ClientID,
		arg.FromAddressID,
		arg.ToAddressID,
		arg.ShipperID,
		arg.ShipmentCode,
		arg.Fee,
		arg.Status,
	)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FromAddressID,
		&i.ToAddressID,
		&i.ShipperID,
		&i.ShipmentCode,
		&i.Fee,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShipment = `-- name: DeleteShipment :exec
DELETE FROM shipments WHERE id = $1
`

func (q *Queries) DeleteShipment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShipment, id)
	return err
}

const getShipment = `-- name: GetShipment :one
SELECT id, client_id, from_address_id, to_address_id, shipper_id, shipment_code, fee, status, created_at, updated_at FROM shipments WHERE id = $1
`

func (q *Queries) GetShipment(ctx context.Context, id int64) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, getShipment, id)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FromAddressID,
		&i.ToAddressID,
		&i.ShipperID,
		&i.ShipmentCode,
		&i.Fee,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShipments = `-- name: ListShipments :many
SELECT id, client_id, from_address_id, to_address_id, shipper_id, shipment_code, fee, status, created_at, updated_at FROM shipments ORDER BY id LIMIT $1 OFFSET $2
`

type ListShipmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShipments(ctx context.Context, arg ListShipmentsParams) ([]Shipment, error) {
	rows, err := q.db.QueryContext(ctx, listShipments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipment{}
	for rows.Next() {
		var i Shipment
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.FromAddressID,
			&i.ToAddressID,
			&i.ShipperID,
			&i.ShipmentCode,
			&i.Fee,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShipmentsByClient = `-- name: ListShipmentsByClient :many
SELECT id, client_id, from_address_id, to_address_id, shipper_id, shipment_code, fee, status, created_at, updated_at FROM shipments WHERE client_id = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type ListShipmentsByClientParams struct {
	ClientID sql.NullInt64 `json:"client_id"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) ListShipmentsByClient(ctx context.Context, arg ListShipmentsByClientParams) ([]Shipment, error) {
	rows, err := q.db.QueryContext(ctx, listShipmentsByClient, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipment{}
	for rows.Next() {
		var i Shipment
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.FromAddressID,
			&i.ToAddressID,
			&i.ShipperID,
			&i.ShipmentCode,
			&i.Fee,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipment = `-- name: UpdateShipment :one
UPDATE shipments
SET client_id = $2, from_address_id = $3, to_address_id = $4, shipper_id = $5, shipment_code = $6, fee = $7, status = $8, updated_at = NOW()
WHERE id = $1
RETURNING id, client_id, from_address_id, to_address_id, shipper_id, shipment_code, fee, status, created_at, updated_at
`

type UpdateShipmentParams struct {
	ID            int64          `json:"id"`
	ClientID      sql.NullInt64  `json:"client_id"`
	FromAddressID sql.NullInt64  `json:"from_address_id"`
	ToAddressID   sql.NullInt64  `json:"to_address_id"`
	ShipperID     sql.NullInt64  `json:"shipper_id"`
	ShipmentCode  sql.NullString `json:"shipment_code"`
	Fee           int32          `json:"fee"`
	Status        sql.NullString `json:"status"`
}

func (q *Queries) UpdateShipment(ctx context.Context, arg UpdateShipmentParams) (Shipment, error) {
	row := q.db.QueryRowContext(ctx, updateShipment,
		arg.ID,
		arg.ClientID,
		arg.FromAddressID,
		arg.ToAddressID,
		arg.ShipperID,
		arg.ShipmentCode,
		arg.Fee,
		arg.Status,
	)
	var i Shipment
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.FromAddressID,
		&i.ToAddressID,
		&i.ShipperID,
		&i.ShipmentCode,
		&i.Fee,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
