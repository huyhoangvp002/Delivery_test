// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (name, contact_email)
VALUES ($1, $2)
RETURNING id, name, account_id, contact_email, created_at
`

type CreateClientParams struct {
	Name         string `json:"name"`
	ContactEmail string `json:"contact_email"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient, arg.Name, arg.ContactEmail)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountID,
		&i.ContactEmail,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, name, account_id, contact_email, created_at FROM clients WHERE id = $1
`

func (q *Queries) GetClient(ctx context.Context, id int64) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountID,
		&i.ContactEmail,
		&i.CreatedAt,
	)
	return i, err
}

const getClientIDByAccountID = `-- name: GetClientIDByAccountID :one
SELECT id FROM clients WHERE account_id = $1
`

func (q *Queries) GetClientIDByAccountID(ctx context.Context, accountID sql.NullInt32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getClientIDByAccountID, accountID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listClients = `-- name: ListClients :many
SELECT id, name, account_id, contact_email, created_at FROM clients ORDER BY id LIMIT $1 OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AccountID,
			&i.ContactEmail,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
SET name = $2, contact_email = $3
WHERE id = $1
RETURNING id, name, account_id, contact_email, created_at
`

type UpdateClientParams struct {
	ID           int64  `json:"id"`
	Name         string `json:"name"`
	ContactEmail string `json:"contact_email"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient, arg.ID, arg.Name, arg.ContactEmail)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AccountID,
		&i.ContactEmail,
		&i.CreatedAt,
	)
	return i, err
}
