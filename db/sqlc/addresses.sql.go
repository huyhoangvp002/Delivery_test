// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: addresses.sql

package db

import (
	"context"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO addresses (name, phone, address, status)
VALUES ($1, $2, $3, $4)
RETURNING id, name, phone, address, status, created_at
`

type CreateAddressParams struct {
	Name    string `json:"name"`
	Phone   string `json:"phone"`
	Address string `json:"address"`
	Status  string `json:"status"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.Name,
		arg.Phone,
		arg.Address,
		arg.Status,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, id)
	return err
}

const getAddressByID = `-- name: GetAddressByID :one
SELECT id, name, phone, address, status, created_at FROM addresses WHERE id = $1
`

func (q *Queries) GetAddressByID(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressByID, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
