// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shipment_status_logs.sql

package db

import (
	"context"
	"database/sql"
)

const createShipmentStatusLog = `-- name: CreateShipmentStatusLog :one
INSERT INTO shipment_status_logs (shipment_id, status, note)
VALUES ($1, $2, $3)
RETURNING id, shipment_id, status, note, created_at
`

type CreateShipmentStatusLogParams struct {
	ShipmentID sql.NullInt64 `json:"shipment_id"`
	Status     string        `json:"status"`
	Note       string        `json:"note"`
}

func (q *Queries) CreateShipmentStatusLog(ctx context.Context, arg CreateShipmentStatusLogParams) (ShipmentStatusLog, error) {
	row := q.db.QueryRowContext(ctx, createShipmentStatusLog, arg.ShipmentID, arg.Status, arg.Note)
	var i ShipmentStatusLog
	err := row.Scan(
		&i.ID,
		&i.ShipmentID,
		&i.Status,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShipmentStatusLog = `-- name: DeleteShipmentStatusLog :exec
DELETE FROM shipment_status_logs WHERE id = $1
`

func (q *Queries) DeleteShipmentStatusLog(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShipmentStatusLog, id)
	return err
}

const getShipmentStatusLog = `-- name: GetShipmentStatusLog :one
SELECT id, shipment_id, status, note, created_at FROM shipment_status_logs WHERE id = $1
`

func (q *Queries) GetShipmentStatusLog(ctx context.Context, id int64) (ShipmentStatusLog, error) {
	row := q.db.QueryRowContext(ctx, getShipmentStatusLog, id)
	var i ShipmentStatusLog
	err := row.Scan(
		&i.ID,
		&i.ShipmentID,
		&i.Status,
		&i.Note,
		&i.CreatedAt,
	)
	return i, err
}

const listLogsByShipmentID = `-- name: ListLogsByShipmentID :many
SELECT id, shipment_id, status, note, created_at FROM shipment_status_logs WHERE shipment_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListLogsByShipmentID(ctx context.Context, shipmentID sql.NullInt64) ([]ShipmentStatusLog, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByShipmentID, shipmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShipmentStatusLog{}
	for rows.Next() {
		var i ShipmentStatusLog
		if err := rows.Scan(
			&i.ID,
			&i.ShipmentID,
			&i.Status,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShipmentStatusLogs = `-- name: ListShipmentStatusLogs :many
SELECT id, shipment_id, status, note, created_at FROM shipment_status_logs ORDER BY id LIMIT $1 OFFSET $2
`

type ListShipmentStatusLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShipmentStatusLogs(ctx context.Context, arg ListShipmentStatusLogsParams) ([]ShipmentStatusLog, error) {
	rows, err := q.db.QueryContext(ctx, listShipmentStatusLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ShipmentStatusLog{}
	for rows.Next() {
		var i ShipmentStatusLog
		if err := rows.Scan(
			&i.ID,
			&i.ShipmentID,
			&i.Status,
			&i.Note,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
