// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accounts.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
  username,
  password,
  role,
  created_at
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, password, role, created_at
`

type CreateAccountParams struct {
	Username  string       `json:"username"`
	Password  string       `json:"password"`
	Role      string       `json:"role"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Username,
		arg.Password,
		arg.Role,
		arg.CreatedAt,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, username, password, role, created_at FROM accounts WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountByUsername = `-- name: GetAccountByUsername :one
SELECT id, username, password, role, created_at FROM accounts WHERE username = $1
`

func (q *Queries) GetAccountByUsername(ctx context.Context, username string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByUsername, username)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountIDByUsername = `-- name: GetAccountIDByUsername :one

SELECT id FROM accounts WHERE username = $1
`

func (q *Queries) GetAccountIDByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAccountIDByUsername, username)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getPasswordByUsername = `-- name: GetPasswordByUsername :one

SELECT password FROM accounts WHERE username = $1
`

func (q *Queries) GetPasswordByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getPasswordByUsername, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT id, username, password, role, created_at FROM accounts
ORDER BY id
LIMIT $1 OFFSET $2
`

type ListAccountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET
  username = $2,
  password = $3,
  role = $4
WHERE id = $1
RETURNING id, username, password, role, created_at
`

type UpdateAccountParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Role,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}
