// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: shippers.sql

package db

import (
	"context"
	"database/sql"
)

const createShipper = `-- name: CreateShipper :one
INSERT INTO shippers (name, phone, carrier, active)
VALUES ($1, $2, $3, $4)
RETURNING id, name, phone, carrier, active, created_at
`

type CreateShipperParams struct {
	Name    string       `json:"name"`
	Phone   string       `json:"phone"`
	Carrier string       `json:"carrier"`
	Active  sql.NullBool `json:"active"`
}

func (q *Queries) CreateShipper(ctx context.Context, arg CreateShipperParams) (Shipper, error) {
	row := q.db.QueryRowContext(ctx, createShipper,
		arg.Name,
		arg.Phone,
		arg.Carrier,
		arg.Active,
	)
	var i Shipper
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Carrier,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const deleteShipper = `-- name: DeleteShipper :exec
DELETE FROM shippers WHERE id = $1
`

func (q *Queries) DeleteShipper(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteShipper, id)
	return err
}

const getShipper = `-- name: GetShipper :one
SELECT id, name, phone, carrier, active, created_at FROM shippers WHERE id = $1
`

func (q *Queries) GetShipper(ctx context.Context, id int64) (Shipper, error) {
	row := q.db.QueryRowContext(ctx, getShipper, id)
	var i Shipper
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Carrier,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const listShippers = `-- name: ListShippers :many
SELECT id, name, phone, carrier, active, created_at FROM shippers ORDER BY id LIMIT $1 OFFSET $2
`

type ListShippersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShippers(ctx context.Context, arg ListShippersParams) ([]Shipper, error) {
	rows, err := q.db.QueryContext(ctx, listShippers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipper{}
	for rows.Next() {
		var i Shipper
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Carrier,
			&i.Active,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipper = `-- name: UpdateShipper :one
UPDATE shippers
SET name = $2, phone = $3, carrier = $4, active = $5
WHERE id = $1
RETURNING id, name, phone, carrier, active, created_at
`

type UpdateShipperParams struct {
	ID      int64        `json:"id"`
	Name    string       `json:"name"`
	Phone   string       `json:"phone"`
	Carrier string       `json:"carrier"`
	Active  sql.NullBool `json:"active"`
}

func (q *Queries) UpdateShipper(ctx context.Context, arg UpdateShipperParams) (Shipper, error) {
	row := q.db.QueryRowContext(ctx, updateShipper,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Carrier,
		arg.Active,
	)
	var i Shipper
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Carrier,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}
