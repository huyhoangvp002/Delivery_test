// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: api_keys.sql

package db

import (
	"context"
	"database/sql"
)

const checkAPIKeyExists = `-- name: CheckAPIKeyExists :one
SELECT EXISTS (
  SELECT 1 FROM api_keys WHERE api_key = $1
)
`

func (q *Queries) CheckAPIKeyExists(ctx context.Context, apiKey string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkAPIKeyExists, apiKey)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createApiKey = `-- name: CreateApiKey :one
INSERT INTO api_keys (client_id, api_key)
VALUES ($1, $2)
RETURNING id, client_id, api_key, created_at, updated_at
`

type CreateApiKeyParams struct {
	ClientID sql.NullInt64 `json:"client_id"`
	ApiKey   string        `json:"api_key"`
}

func (q *Queries) CreateApiKey(ctx context.Context, arg CreateApiKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createApiKey, arg.ClientID, arg.ApiKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApiKey = `-- name: DeleteApiKey :exec
DELETE FROM api_keys WHERE id = $1
`

func (q *Queries) DeleteApiKey(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteApiKey, id)
	return err
}

const getAPIKeyByValue = `-- name: GetAPIKeyByValue :one
SELECT id, client_id, api_key, created_at, updated_at FROM api_keys WHERE api_key = $1 LIMIT 1
`

func (q *Queries) GetAPIKeyByValue(ctx context.Context, apiKey string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKeyByValue, apiKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getApiKey = `-- name: GetApiKey :one
SELECT id, client_id, api_key, created_at, updated_at FROM api_keys WHERE id = $1
`

func (q *Queries) GetApiKey(ctx context.Context, id int64) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getApiKey, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listApiKeys = `-- name: ListApiKeys :many
SELECT id, client_id, api_key, created_at, updated_at FROM api_keys ORDER BY id LIMIT $1 OFFSET $2
`

type ListApiKeysParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListApiKeys(ctx context.Context, arg ListApiKeysParams) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, listApiKeys, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApiKeysByClientID = `-- name: ListApiKeysByClientID :many
SELECT id, client_id, api_key, created_at, updated_at FROM api_keys WHERE client_id = $1 ORDER BY id LIMIT $2 OFFSET $3
`

type ListApiKeysByClientIDParams struct {
	ClientID sql.NullInt64 `json:"client_id"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) ListApiKeysByClientID(ctx context.Context, arg ListApiKeysByClientIDParams) ([]ApiKey, error) {
	rows, err := q.db.QueryContext(ctx, listApiKeysByClientID, arg.ClientID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ApiKey{}
	for rows.Next() {
		var i ApiKey
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApiKey = `-- name: UpdateApiKey :one
UPDATE api_keys
SET api_key = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, client_id, api_key, created_at, updated_at
`

type UpdateApiKeyParams struct {
	ID     int64  `json:"id"`
	ApiKey string `json:"api_key"`
}

func (q *Queries) UpdateApiKey(ctx context.Context, arg UpdateApiKeyParams) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, updateApiKey, arg.ID, arg.ApiKey)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
